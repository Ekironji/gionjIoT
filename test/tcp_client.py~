#!/usr/bin/python

import socket
import sys
import json
import getopt
import time

def printHelp():
   print 'Usage:'
   print '  argument is a number, the node: python tcp_client.py 1'

def main(argv):
   TCP_IP = '192.168.0.104'
   TCP_PORT = 10002
   BUFFER_SIZE = 1024

   # get udp lookup ################################################3
   UDP_PORT = 10001
	
   sendData = {'REQUEST':'LOOKUP','HOSTNAME':'NODE_'+str(sys.argv[1]),"SERVICES":"accelerometer"}
   time.sleep(1)

   sendDataString = json.dumps(sendData)	

   sock = socket.socket(socket.AF_INET, # Internet
                     socket.SOCK_DGRAM) # UDP
    # broadcast configuration                  
   sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
   sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
	
	# request send
   sock.sendto(sendDataString, ('255.255.255.255', UDP_PORT))
	
   data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes
	
	## decodifico col json
   decodedJson = json.loads(data)

   print ">>>>>>>>>" + str(decodedJson)
	
   if decodedJson['RESPONSE'] == 'true':
      print 'ip_address' + decodedJson['SERVER_IP']
      TCP_IP = decodedJson['SERVER_IP']

   #################################################################

   accEn = open('/sys/class/misc/FreescaleAccelerometer/enable', "w")
   magEn = open('/sys/class/misc/FreescaleMagnetometer/enable', "w")
   gyrEn = open('/sys/class/misc/FreescaleGyroscope/enable', "w")

   accEn.write("1")
   magEn.write("1")
   gyrEn.write("1")

   acc = open('/sys/class/misc/FreescaleAccelerometer/data')
   mag = open('/sys/class/misc/FreescaleMagnetometer/data')
   gyr = open('/sys/class/misc/FreescaleGyroscope/data')

   accs = acc.read().replace('\n','').split(",")
   mags = mag.read().replace('\n','').split(",")
   gyrs = gyr.read().replace('\n','').split(",")
   		
   responseData = {"REQUEST":"JOIN","HOSTNAME":'NODE_'+str(sys.argv[1]),"SERVICES":"1dsdsds|22|33"}
   sensorData = {"REQUEST":"SENSORS_DATA","HOSTNAME":'NODE_'+str(sys.argv[1]),"LABELS":"aX|aY|aZ","VALUES": str(accs[0])+'|'+str(accs[1])+'|'+str(accs[2]) }

   MESSAGE = json.dumps(sensorData)
   print "sensorData " + MESSAGE

   try:
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.connect((TCP_IP, TCP_PORT))
      MESSAGE = json.dumps(responseData)
      print MESSAGE
      while 1:
         # read sensor and parse
         acc = open('/sys/class/misc/FreescaleAccelerometer/data')
         accs = acc.read().replace('\n','').split(",")
         # prepare string
         sensorData = {"REQUEST":"SENSORS_DATA","HOSTNAME":'NODE_'+str(sys.argv[1]),"LABELS":"aX|aY|aZ","VALUES": str(accs[0])+'|'+str(accs[1])+'|'+str(accs[2]) }
         # prepare json
         MESSAGE = json.dumps(sensorData)     
         print MESSAGE
         # send message
         s.send(MESSAGE)
         data = s.recv(BUFFER_SIZE)
         time.sleep(1)
      s.close()
   except KeyboardInterrupt:		
      s.close()
      print "INTERRUZIONE"  

   print "(belzedootest.py) tcp response:", data

if __name__ == "__main__":
   main(sys.argv[1:])
